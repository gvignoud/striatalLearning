import numpy as np
import os
os.path.dirname(os.path.abspath(__file__))

current_path = os.path.dirname(os.path.abspath(__file__))

from NeuronModel import integrate_and_fire, izhikevich, integrate_and_fire_MSN
import InitFunctions

params_MSN_Yim = {
    'init': InitFunctions.dirac(-80.),
    'tau': 200. / 12.5,
    'R': 1000. / 12.5,
    'C': 200. / 1000.,
    'E_l': -80.,
    'V_th': -45.,
    'E_r': -80.,
    'scale_I': None,
    'Burst': None
}

params_MSN_Elodie = {
    'init': InitFunctions.dirac(-80.),
    'tau': 200. / 12.5,
    'R': 1000. / 12.5,
    'E_l': -80.,
    'V_th': -45.,
    'E_r': -80.,
    'scale_I': None,
    'Burst': None
}

params_MSN_Burst = {
    'init': InitFunctions.dirac(-80.),
    'C': 50. / 1000.,
    'k_input': 1.,
    'v_rest': -80.,
    'v_t': -50.,
    'c': -45.,
    'v_peak': 20.,
    'a': 0.02,
    'b': 20.,
    'd': 0.,
    'scale_I': None,
    'Burst': 4,
    'tau': 200. / 12.5,
    }

# Izikievich book
params_MSN_Izhi = {
    'init': InitFunctions.dirac(-80.),
    'C': 50. / 1000.,
    'k_input': 1. / 1000.,
    'v_rest': -80.,
    'v_t': -20.,
    'c': -55.,
    'v_peak': 40.,
    'a': 0.01,
    'b': -20. / 1000.,
    'd': 150. / 1000.,
    'scale_I': 100.,
    'Burst': None,
    'tau': 200. / 12.5,
    }


# 2009 - Humphries - Capturing dopaminergic modulation and bimodal membrane behaviour of striatal spiny neurons in accurate, reduced models
params_MSN_Hump_1 = {
    'init': InitFunctions.dirac(-80.),
    'C': 15.2 / 1000.,
    'k_input': 1. / 1000.,
    'v_rest': -80.,
    'v_t': -29.7,
    'c': -55.,
    'v_peak': 40.,
    'a': 0.01,
    'b': -20. / 1000.,
    'd': 91. / 1000.,
    'scale_I': 100.,
    'Burst': None,
    'tau': 200. / 12.5,
    }

# 2009 - Humphries - Dopamine-modulated dynamic cell assemblies generated by the GABAergic striatal microcircuit
params_MSN_Hump_2 = {
    'init': InitFunctions.dirac(-80.),
    'C': 15.2 / 1000.,
    'k_input': 1.14 / 1000.,
    'v_rest': -80.,
    'v_t': -33.8,
    'c': -55.,
    'v_peak': 40.,
    'a': 0.05,
    'b': -20. / 1000.,
    'd': 377. / 1000.,
    'scale_I': 100.,
    'Burst': None,
    'tau': 200. / 12.5,
    }

path_model = current_path + '/../Articles/Sequential_Learning_Striatum/Models'

dict_params_MSN = dict(MSN_Yim=(integrate_and_fire, params_MSN_Yim), MSN_Burst=(izhikevich, params_MSN_Burst),
                       MSN_Izhi=(izhikevich, params_MSN_Izhi),
                       MSN_Hump_1=(izhikevich, params_MSN_Hump_1),
                       MSN_Hump_2=(izhikevich, params_MSN_Hump_2),
                       MSN_Izhi_EXP='{}/params_Izhi_Elodie_MSN_In_Vitro.npy'.format(path_model),
                       MSN_Burst_EXP='{}/params_Burst_Elodie_MSN_In_Vitro.npy'.format(path_model),
                       MSN_IAF_EXP='{}/params_IAF_Elodie_MSN_In_Vitro.npy'.format(path_model),
                       )

def find_params_neuron(path):
    if path in dict_params_MSN.keys():
        if isinstance(dict_params_MSN[path], str):
            params = np.load(dict_params_MSN[path], allow_pickle=True).item()
            params['init'] = InitFunctions.dirac(params['init'])
            if params['neuron_type'] == 'IAF':
                del params['neuron_type']
                return integrate_and_fire, params
            elif params['neuron_type'] == 'IAF_MSN':
                del params['neuron_type']
                return integrate_and_fire_MSN, params
            elif params['neuron_type'] == 'Izhi':
                del params['neuron_type']
                return izhikevich, params
        else:
            return dict_params_MSN[path]
    else:
        raise NameError('Does not exist')
